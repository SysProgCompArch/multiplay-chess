/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: message.proto */

#ifndef PROTOBUF_C_message_2eproto__INCLUDED
#define PROTOBUF_C_message_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct _ClientMessage ClientMessage;
typedef struct _PingRequest PingRequest;
typedef struct _EchoRequest EchoRequest;
typedef struct _MatchGameRequest MatchGameRequest;
typedef struct _MoveRequest MoveRequest;
typedef struct _ResignRequest ResignRequest;
typedef struct _ChatRequest ChatRequest;
typedef struct _ServerMessage ServerMessage;
typedef struct _PingResponse PingResponse;
typedef struct _EchoResponse EchoResponse;
typedef struct _MatchGameResponse MatchGameResponse;
typedef struct _MoveResult MoveResult;
typedef struct _MoveBroadcast MoveBroadcast;
typedef struct _ResignBroadcast ResignBroadcast;
typedef struct _ChatBroadcast ChatBroadcast;
typedef struct _ErrorResponse ErrorResponse;


/* --- enums --- */

/*
 * 메시지 버전(향후 스키마 바뀔 때 하위 호환용으로 활용)
 */
typedef enum _ProtocolVersion {
  PROTOCOL_VERSION__PV_UNKNOWN = 0,
  /*
   * 처음 버전
   */
  PROTOCOL_VERSION__PV_V1 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOCOL_VERSION)
} ProtocolVersion;
/*
 * 체스 기물 종류
 */
typedef enum _PieceType {
  PIECE_TYPE__PT_NONE = 0,
  PIECE_TYPE__PT_PAWN = 1,
  PIECE_TYPE__PT_KNIGHT = 2,
  PIECE_TYPE__PT_BISHOP = 3,
  PIECE_TYPE__PT_ROOK = 4,
  PIECE_TYPE__PT_QUEEN = 5,
  PIECE_TYPE__PT_KING = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PIECE_TYPE)
} PieceType;
/*
 * 상대편 색 정의
 */
typedef enum _Color {
  COLOR__COLOR_UNSPECIFIED = 0,
  COLOR__COLOR_WHITE = 1,
  COLOR__COLOR_BLACK = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COLOR)
} Color;

/* --- messages --- */

typedef enum {
  CLIENT_MESSAGE__MSG__NOT_SET = 0,
  CLIENT_MESSAGE__MSG_PING = 10,
  CLIENT_MESSAGE__MSG_ECHO = 11,
  CLIENT_MESSAGE__MSG_MATCH_GAME = 20,
  CLIENT_MESSAGE__MSG_MAKE_MOVE = 21,
  CLIENT_MESSAGE__MSG_RESIGN = 22,
  CLIENT_MESSAGE__MSG_CHAT = 23
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_MESSAGE__MSG)
} ClientMessage__MsgCase;

/*
 * 사용자가 서버로 보내는 모든 요청을 하나로 묶은 래퍼(wrapper) 메시지
 */
struct  _ClientMessage
{
  ProtobufCMessage base;
  /*
   * (optional) 프로토콜 버전
   */
  ProtocolVersion version;
  ClientMessage__MsgCase msg_case;
  union {
    PingRequest *ping;
    EchoRequest *echo;
    MatchGameRequest *match_game;
    MoveRequest *make_move;
    ResignRequest *resign;
    ChatRequest *chat;
  };
};
#define CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_message__descriptor) \
    , PROTOCOL_VERSION__PV_UNKNOWN, CLIENT_MESSAGE__MSG__NOT_SET, {0} }


struct  _PingRequest
{
  ProtobufCMessage base;
  char *message;
};
#define PING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ping_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _EchoRequest
{
  ProtobufCMessage base;
  char *message;
};
#define ECHO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&echo_request__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * 게임 참가 요청
 */
struct  _MatchGameRequest
{
  ProtobufCMessage base;
  /*
   * 예: UUID 혹은 로그인된 사용자 ID
   */
  char *player_id;
  /*
   * 만약 신규 게임을 원하면 빈 문자열("")을 보낼 수도 있고,
   * 이미 생성된 특정 게임에 참가할 때는 game_id를 지정합니다.
   */
  char *desired_game_id;
};
#define MATCH_GAME_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&match_game_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * 기물 이동 요청
 */
struct  _MoveRequest
{
  ProtobufCMessage base;
  /*
   * 어떤 게임인지 식별
   */
  char *game_id;
  /*
   * 요청 보낸 유저 ID
   */
  char *player_id;
  /*
   * 이동 전 위치
   */
  char *from;
  /*
   * 이동 후 위치
   */
  char *to;
  /*
   * 요청 시점 타임스탬프
   */
  Google__Protobuf__Timestamp *timestamp;
};
#define MOVE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&move_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * 기권(Resign) 요청
 */
struct  _ResignRequest
{
  ProtobufCMessage base;
  char *game_id;
  char *player_id;
};
#define RESIGN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resign_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * 채팅 메시지 전송 예시
 */
struct  _ChatRequest
{
  ProtobufCMessage base;
  char *game_id;
  char *player_id;
  char *message;
  Google__Protobuf__Timestamp *timestamp;
};
#define CHAT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


typedef enum {
  SERVER_MESSAGE__MSG__NOT_SET = 0,
  SERVER_MESSAGE__MSG_PING_RES = 10,
  SERVER_MESSAGE__MSG_ECHO_RES = 11,
  SERVER_MESSAGE__MSG_MATCH_GAME_RES = 20,
  SERVER_MESSAGE__MSG_MOVE_RESULT = 21,
  SERVER_MESSAGE__MSG_MOVE_BROADCAST = 22,
  SERVER_MESSAGE__MSG_RESIGN_BROADCAST = 23,
  SERVER_MESSAGE__MSG_CHAT_BROADCAST = 24,
  SERVER_MESSAGE__MSG_ERROR = 99
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SERVER_MESSAGE__MSG)
} ServerMessage__MsgCase;

/*
 * 서버가 클라이언트에게 보내는 모든 메시지를 하나로 묶은 래퍼(wrapper)
 */
struct  _ServerMessage
{
  ProtobufCMessage base;
  /*
   * 프로토콜 버전
   */
  ProtocolVersion version;
  ServerMessage__MsgCase msg_case;
  union {
    PingResponse *ping_res;
    EchoResponse *echo_res;
    MatchGameResponse *match_game_res;
    MoveResult *move_result;
    MoveBroadcast *move_broadcast;
    ResignBroadcast *resign_broadcast;
    ChatBroadcast *chat_broadcast;
    /*
     * 그 외 새 기능 추가 시 확장 가능
     */
    ErrorResponse *error;
  };
};
#define SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&server_message__descriptor) \
    , PROTOCOL_VERSION__PV_UNKNOWN, SERVER_MESSAGE__MSG__NOT_SET, {0} }


struct  _PingResponse
{
  ProtobufCMessage base;
  char *message;
};
#define PING_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ping_response__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _EchoResponse
{
  ProtobufCMessage base;
  char *message;
};
#define ECHO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&echo_response__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * 게임 참가 요청에 대한 응답
 */
struct  _MatchGameResponse
{
  ProtobufCMessage base;
  char *game_id;
  protobuf_c_boolean success;
  /*
   * 실패 시 이유 등
   */
  char *message;
  /*
   * 게임에 이미 상대가 있어서 바로 시작되는 경우, 
   * 상대 ID나 색(WHITE/BLACK)도 함께 알려줄 수 있음
   */
  Color assigned_color;
};
#define MATCH_GAME_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&match_game_response__descriptor) \
    , (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, COLOR__COLOR_UNSPECIFIED }


/*
 * 단일 클라이언트에게 보내는 “내가 보낸 MoveRequest에 대한 결과”
 */
struct  _MoveResult
{
  ProtobufCMessage base;
  char *game_id;
  /*
   * 요청 보낸 유저
   */
  char *player_id;
  protobuf_c_boolean success;
  /*
   * 예: “이동할 수 없는 기물입니다”
   */
  char *message;
  /*
   * (선택) 업데이트된 체스판 FEN이나 PGN 등을 포함할 수도 있음
   */
  char *updated_fen;
  Google__Protobuf__Timestamp *timestamp;
};
#define MOVE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&move_result__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * 제로 모든 관련 클라이언트(특히 상대편)에게 브로드캐스트되는 “이동 알림”
 */
struct  _MoveBroadcast
{
  ProtobufCMessage base;
  char *game_id;
  /*
   * 실제로 이동을 수행한 플레이어
   */
  char *player_id;
  char *from;
  char *to;
  PieceType promotion;
  Google__Protobuf__Timestamp *timestamp;
};
#define MOVE_BROADCAST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&move_broadcast__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, PIECE_TYPE__PT_NONE, NULL }


/*
 * 기권 시 브로드캐스트 (모든 관여자에게 알림)
 */
struct  _ResignBroadcast
{
  ProtobufCMessage base;
  char *game_id;
  /*
   * 기권한 플레이어
   */
  char *player_id;
  /*
   * 승리자 색
   */
  Color winner_color;
  Google__Protobuf__Timestamp *timestamp;
};
#define RESIGN_BROADCAST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resign_broadcast__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, COLOR__COLOR_UNSPECIFIED, NULL }


/*
 * 채팅 메시지 브로드캐스트
 */
struct  _ChatBroadcast
{
  ProtobufCMessage base;
  char *game_id;
  char *player_id;
  char *message;
  Google__Protobuf__Timestamp *timestamp;
};
#define CHAT_BROADCAST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_broadcast__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * 오류를 통일해서 보낼 때
 */
struct  _ErrorResponse
{
  ProtobufCMessage base;
  /*
   * 오류가 연관된 게임이 있으면
   */
  char *game_id;
  /*
   * 오류를 받는 대상 클라이언트
   */
  char *player_id;
  /*
   * 서버 내부 오류 코드 (예: 1=InvalidMove, 2=NotInGame 등)
   */
  int32_t code;
  /*
   * 사람이 읽을 수 있는 오류 설명
   */
  char *message;
};
#define ERROR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&error_response__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


/* ClientMessage methods */
void   client_message__init
                     (ClientMessage         *message);
size_t client_message__get_packed_size
                     (const ClientMessage   *message);
size_t client_message__pack
                     (const ClientMessage   *message,
                      uint8_t             *out);
size_t client_message__pack_to_buffer
                     (const ClientMessage   *message,
                      ProtobufCBuffer     *buffer);
ClientMessage *
       client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_message__free_unpacked
                     (ClientMessage *message,
                      ProtobufCAllocator *allocator);
/* PingRequest methods */
void   ping_request__init
                     (PingRequest         *message);
size_t ping_request__get_packed_size
                     (const PingRequest   *message);
size_t ping_request__pack
                     (const PingRequest   *message,
                      uint8_t             *out);
size_t ping_request__pack_to_buffer
                     (const PingRequest   *message,
                      ProtobufCBuffer     *buffer);
PingRequest *
       ping_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ping_request__free_unpacked
                     (PingRequest *message,
                      ProtobufCAllocator *allocator);
/* EchoRequest methods */
void   echo_request__init
                     (EchoRequest         *message);
size_t echo_request__get_packed_size
                     (const EchoRequest   *message);
size_t echo_request__pack
                     (const EchoRequest   *message,
                      uint8_t             *out);
size_t echo_request__pack_to_buffer
                     (const EchoRequest   *message,
                      ProtobufCBuffer     *buffer);
EchoRequest *
       echo_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   echo_request__free_unpacked
                     (EchoRequest *message,
                      ProtobufCAllocator *allocator);
/* MatchGameRequest methods */
void   match_game_request__init
                     (MatchGameRequest         *message);
size_t match_game_request__get_packed_size
                     (const MatchGameRequest   *message);
size_t match_game_request__pack
                     (const MatchGameRequest   *message,
                      uint8_t             *out);
size_t match_game_request__pack_to_buffer
                     (const MatchGameRequest   *message,
                      ProtobufCBuffer     *buffer);
MatchGameRequest *
       match_game_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   match_game_request__free_unpacked
                     (MatchGameRequest *message,
                      ProtobufCAllocator *allocator);
/* MoveRequest methods */
void   move_request__init
                     (MoveRequest         *message);
size_t move_request__get_packed_size
                     (const MoveRequest   *message);
size_t move_request__pack
                     (const MoveRequest   *message,
                      uint8_t             *out);
size_t move_request__pack_to_buffer
                     (const MoveRequest   *message,
                      ProtobufCBuffer     *buffer);
MoveRequest *
       move_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   move_request__free_unpacked
                     (MoveRequest *message,
                      ProtobufCAllocator *allocator);
/* ResignRequest methods */
void   resign_request__init
                     (ResignRequest         *message);
size_t resign_request__get_packed_size
                     (const ResignRequest   *message);
size_t resign_request__pack
                     (const ResignRequest   *message,
                      uint8_t             *out);
size_t resign_request__pack_to_buffer
                     (const ResignRequest   *message,
                      ProtobufCBuffer     *buffer);
ResignRequest *
       resign_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resign_request__free_unpacked
                     (ResignRequest *message,
                      ProtobufCAllocator *allocator);
/* ChatRequest methods */
void   chat_request__init
                     (ChatRequest         *message);
size_t chat_request__get_packed_size
                     (const ChatRequest   *message);
size_t chat_request__pack
                     (const ChatRequest   *message,
                      uint8_t             *out);
size_t chat_request__pack_to_buffer
                     (const ChatRequest   *message,
                      ProtobufCBuffer     *buffer);
ChatRequest *
       chat_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_request__free_unpacked
                     (ChatRequest *message,
                      ProtobufCAllocator *allocator);
/* ServerMessage methods */
void   server_message__init
                     (ServerMessage         *message);
size_t server_message__get_packed_size
                     (const ServerMessage   *message);
size_t server_message__pack
                     (const ServerMessage   *message,
                      uint8_t             *out);
size_t server_message__pack_to_buffer
                     (const ServerMessage   *message,
                      ProtobufCBuffer     *buffer);
ServerMessage *
       server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   server_message__free_unpacked
                     (ServerMessage *message,
                      ProtobufCAllocator *allocator);
/* PingResponse methods */
void   ping_response__init
                     (PingResponse         *message);
size_t ping_response__get_packed_size
                     (const PingResponse   *message);
size_t ping_response__pack
                     (const PingResponse   *message,
                      uint8_t             *out);
size_t ping_response__pack_to_buffer
                     (const PingResponse   *message,
                      ProtobufCBuffer     *buffer);
PingResponse *
       ping_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ping_response__free_unpacked
                     (PingResponse *message,
                      ProtobufCAllocator *allocator);
/* EchoResponse methods */
void   echo_response__init
                     (EchoResponse         *message);
size_t echo_response__get_packed_size
                     (const EchoResponse   *message);
size_t echo_response__pack
                     (const EchoResponse   *message,
                      uint8_t             *out);
size_t echo_response__pack_to_buffer
                     (const EchoResponse   *message,
                      ProtobufCBuffer     *buffer);
EchoResponse *
       echo_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   echo_response__free_unpacked
                     (EchoResponse *message,
                      ProtobufCAllocator *allocator);
/* MatchGameResponse methods */
void   match_game_response__init
                     (MatchGameResponse         *message);
size_t match_game_response__get_packed_size
                     (const MatchGameResponse   *message);
size_t match_game_response__pack
                     (const MatchGameResponse   *message,
                      uint8_t             *out);
size_t match_game_response__pack_to_buffer
                     (const MatchGameResponse   *message,
                      ProtobufCBuffer     *buffer);
MatchGameResponse *
       match_game_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   match_game_response__free_unpacked
                     (MatchGameResponse *message,
                      ProtobufCAllocator *allocator);
/* MoveResult methods */
void   move_result__init
                     (MoveResult         *message);
size_t move_result__get_packed_size
                     (const MoveResult   *message);
size_t move_result__pack
                     (const MoveResult   *message,
                      uint8_t             *out);
size_t move_result__pack_to_buffer
                     (const MoveResult   *message,
                      ProtobufCBuffer     *buffer);
MoveResult *
       move_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   move_result__free_unpacked
                     (MoveResult *message,
                      ProtobufCAllocator *allocator);
/* MoveBroadcast methods */
void   move_broadcast__init
                     (MoveBroadcast         *message);
size_t move_broadcast__get_packed_size
                     (const MoveBroadcast   *message);
size_t move_broadcast__pack
                     (const MoveBroadcast   *message,
                      uint8_t             *out);
size_t move_broadcast__pack_to_buffer
                     (const MoveBroadcast   *message,
                      ProtobufCBuffer     *buffer);
MoveBroadcast *
       move_broadcast__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   move_broadcast__free_unpacked
                     (MoveBroadcast *message,
                      ProtobufCAllocator *allocator);
/* ResignBroadcast methods */
void   resign_broadcast__init
                     (ResignBroadcast         *message);
size_t resign_broadcast__get_packed_size
                     (const ResignBroadcast   *message);
size_t resign_broadcast__pack
                     (const ResignBroadcast   *message,
                      uint8_t             *out);
size_t resign_broadcast__pack_to_buffer
                     (const ResignBroadcast   *message,
                      ProtobufCBuffer     *buffer);
ResignBroadcast *
       resign_broadcast__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resign_broadcast__free_unpacked
                     (ResignBroadcast *message,
                      ProtobufCAllocator *allocator);
/* ChatBroadcast methods */
void   chat_broadcast__init
                     (ChatBroadcast         *message);
size_t chat_broadcast__get_packed_size
                     (const ChatBroadcast   *message);
size_t chat_broadcast__pack
                     (const ChatBroadcast   *message,
                      uint8_t             *out);
size_t chat_broadcast__pack_to_buffer
                     (const ChatBroadcast   *message,
                      ProtobufCBuffer     *buffer);
ChatBroadcast *
       chat_broadcast__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_broadcast__free_unpacked
                     (ChatBroadcast *message,
                      ProtobufCAllocator *allocator);
/* ErrorResponse methods */
void   error_response__init
                     (ErrorResponse         *message);
size_t error_response__get_packed_size
                     (const ErrorResponse   *message);
size_t error_response__pack
                     (const ErrorResponse   *message,
                      uint8_t             *out);
size_t error_response__pack_to_buffer
                     (const ErrorResponse   *message,
                      ProtobufCBuffer     *buffer);
ErrorResponse *
       error_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   error_response__free_unpacked
                     (ErrorResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ClientMessage_Closure)
                 (const ClientMessage *message,
                  void *closure_data);
typedef void (*PingRequest_Closure)
                 (const PingRequest *message,
                  void *closure_data);
typedef void (*EchoRequest_Closure)
                 (const EchoRequest *message,
                  void *closure_data);
typedef void (*MatchGameRequest_Closure)
                 (const MatchGameRequest *message,
                  void *closure_data);
typedef void (*MoveRequest_Closure)
                 (const MoveRequest *message,
                  void *closure_data);
typedef void (*ResignRequest_Closure)
                 (const ResignRequest *message,
                  void *closure_data);
typedef void (*ChatRequest_Closure)
                 (const ChatRequest *message,
                  void *closure_data);
typedef void (*ServerMessage_Closure)
                 (const ServerMessage *message,
                  void *closure_data);
typedef void (*PingResponse_Closure)
                 (const PingResponse *message,
                  void *closure_data);
typedef void (*EchoResponse_Closure)
                 (const EchoResponse *message,
                  void *closure_data);
typedef void (*MatchGameResponse_Closure)
                 (const MatchGameResponse *message,
                  void *closure_data);
typedef void (*MoveResult_Closure)
                 (const MoveResult *message,
                  void *closure_data);
typedef void (*MoveBroadcast_Closure)
                 (const MoveBroadcast *message,
                  void *closure_data);
typedef void (*ResignBroadcast_Closure)
                 (const ResignBroadcast *message,
                  void *closure_data);
typedef void (*ChatBroadcast_Closure)
                 (const ChatBroadcast *message,
                  void *closure_data);
typedef void (*ErrorResponse_Closure)
                 (const ErrorResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    protocol_version__descriptor;
extern const ProtobufCEnumDescriptor    piece_type__descriptor;
extern const ProtobufCEnumDescriptor    color__descriptor;
extern const ProtobufCMessageDescriptor client_message__descriptor;
extern const ProtobufCMessageDescriptor ping_request__descriptor;
extern const ProtobufCMessageDescriptor echo_request__descriptor;
extern const ProtobufCMessageDescriptor match_game_request__descriptor;
extern const ProtobufCMessageDescriptor move_request__descriptor;
extern const ProtobufCMessageDescriptor resign_request__descriptor;
extern const ProtobufCMessageDescriptor chat_request__descriptor;
extern const ProtobufCMessageDescriptor server_message__descriptor;
extern const ProtobufCMessageDescriptor ping_response__descriptor;
extern const ProtobufCMessageDescriptor echo_response__descriptor;
extern const ProtobufCMessageDescriptor match_game_response__descriptor;
extern const ProtobufCMessageDescriptor move_result__descriptor;
extern const ProtobufCMessageDescriptor move_broadcast__descriptor;
extern const ProtobufCMessageDescriptor resign_broadcast__descriptor;
extern const ProtobufCMessageDescriptor chat_broadcast__descriptor;
extern const ProtobufCMessageDescriptor error_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_message_2eproto__INCLUDED */

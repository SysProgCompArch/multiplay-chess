syntax = "proto3";

import "google/protobuf/timestamp.proto";

// ===================================================================
// 공통 타입 정의
// ===================================================================

// 메시지 버전(향후 스키마 바뀔 때 하위 호환용으로 활용)
enum ProtocolVersion {
  PV_UNKNOWN = 0;
  PV_V1      = 1;  // 처음 버전
}

// 체스 기물 종류
enum PieceType {
  PT_NONE   = 0;
  PT_PAWN   = 1;
  PT_KNIGHT = 2;
  PT_BISHOP = 3;
  PT_ROOK   = 4;
  PT_QUEEN  = 5;
  PT_KING   = 6;
}

// 상대편 색 정의
enum Team {
  TEAM_UNSPECIFIED = 0;
  TEAM_WHITE       = 1;
  TEAM_BLACK       = 2;
}

// 게임 종료 유형
enum GameEndType {
  GAME_END_UNKNOWN    = 0;
  GAME_END_RESIGN     = 1;  // 기권으로 인한 종료
  GAME_END_DISCONNECT = 2;  // 상대방 연결 끊김으로 인한 종료
  GAME_END_CHECKMATE  = 3;  // 체크메이트로 인한 종료
  GAME_END_STALEMATE  = 4;  // 스테일메이트로 인한 종료
  GAME_END_DRAW       = 5;  // 무승부로 인한 종료
  GAME_END_TIMEOUT    = 6;  // 시간 초과로 인한 종료
}

// 클라이언트→서버: 시간초과 알림 (빈 메시지)
message TimeoutRequest {
  // 필드 없음
}

// ===================================================================
// 클라이언트 → 서버 요청 메시지 (ClientMessage)
// ===================================================================

// 사용자가 서버로 보내는 모든 요청을 하나로 묶은 래퍼(wrapper) 메시지
message ClientMessage {
  ProtocolVersion version = 1;  // (optional) 프로토콜 버전

  oneof msg {
    PingRequest      ping       = 10;
    EchoRequest      echo       = 11;
    MatchGameRequest match_game = 20;
    MoveRequest      move       = 21;
    ResignRequest    resign     = 22;
    ChatRequest      chat       = 23;
    TimeoutRequest   timeout    = 24;
  }
}

message PingRequest {
  string message = 1;
}

message EchoRequest {
  string message = 1;
}

// 게임 참가 요청
message MatchGameRequest {
  string player_id       = 1;  // 예: UUID 혹은 로그인된 사용자 ID
  string desired_game_id = 2;
  // 만약 신규 게임을 원하면 빈 문자열("")을 보낼 수도 있고,
  // 이미 생성된 특정 게임에 참가할 때는 game_id를 지정합니다.
}

// 기물 이동 요청
message MoveRequest {
  string from = 1;  // 이동 전 위치
  string to   = 2;  // 이동 후 위치
  // 요청 시점 타임스탬프
  google.protobuf.Timestamp timestamp = 3;
}

// 기권(Resign) 요청
message ResignRequest {
  string player_id = 1;
}

// 채팅 메시지 전송 예시
message ChatRequest {
  string                    message   = 1;
  google.protobuf.Timestamp timestamp = 2;
}

// ===================================================================
// 서버 → 클라이언트 응답/브로드캐스트 메시지 (ServerMessage)
// ===================================================================

// 서버가 클라이언트에게 보내는 모든 메시지를 하나로 묶은 래퍼(wrapper)
message ServerMessage {
  ProtocolVersion version = 1;  // 프로토콜 버전

  oneof msg {
    PingResponse      ping_res        = 10;
    EchoResponse      echo_res        = 11;
    MatchGameResponse match_game_res  = 20;
    MoveResponse      move_res        = 21;
    MoveBroadcast     move_broadcast  = 22;
    CheckBroadcast    check_broadcast = 23;
    GameEndBroadcast  game_end        = 24;
    ChatBroadcast     chat_broadcast  = 25;
    ErrorResponse     error           = 99;
    // 그 외 새 기능 추가 시 확장 가능
  }
}

message PingResponse {
  string message = 1;
}

message EchoResponse {
  string message = 1;
}

// 게임 참가 요청에 대한 응답
message MatchGameResponse {
  string game_id = 1;
  bool   success = 2;
  string message = 3;  // 실패 시 이유 등
  // 게임에 이미 상대가 있어서 바로 시작되는 경우,
  // 상대 ID나 색(WHITE/BLACK)도 함께 알려줄 수 있음
  Team   assigned_team = 4;
  string opponent_name = 5;  // 상대방 이름 (게임 시작 시)
}

// 단일 클라이언트에게 보내는 "내가 보낸 MoveRequest에 대한 결과"
message MoveResponse {
  string game_id   = 1;
  string player_id = 2;  // 요청 보낸 유저
  bool   success   = 3;
  string message   = 4;  // 예: "이동할 수 없는 기물입니다"
  // (선택) 업데이트된 체스판 FEN이나 PGN 등을 포함할 수도 있음
  string                    updated_fen = 5;
  google.protobuf.Timestamp timestamp   = 6;
}

// 제로 모든 관련 클라이언트(특히 상대편)에게 브로드캐스트되는 "이동 알림"
message MoveBroadcast {
  string    game_id   = 1;
  string    player_id = 2;  // 실제로 이동을 수행한 플레이어
  string    from      = 3;
  string    to        = 4;
  PieceType promotion = 5;

  google.protobuf.Timestamp timestamp = 6;

  // 게임 종료 관련 정보 (이동으로 인해 게임이 종료되는 경우)
  bool        game_ends    = 7;   // 이 이동으로 게임이 종료되는지 여부
  Team        winner_team  = 8;   // 승리자 색 (무승부인 경우 TEAM_UNSPECIFIED)
  GameEndType end_type     = 9;   // 게임 종료 유형
  bool        is_check     = 10;  // 이 이동으로 체크 상황이 발생했는지 여부
  Team        checked_team = 11;  // 체크 당한 색 (is_check가 true일 때만 의미있음)
}

message CheckBroadcast {
  string                    game_id   = 1;
  string                    player_id = 2;  // 체크 당한 플레이어
  Team                      by_team   = 3;  // 체크 당한 색
  google.protobuf.Timestamp timestamp = 4;
}

// 게임 종료 브로드캐스트 (모든 관련 클라이언트에게 알림)
message GameEndBroadcast {
  string                    game_id     = 1;  // 게임 ID
  string                    player_id   = 2;  // 게임 종료를 발생시킨 플레이어 ID (기권한 플레이어, 연결 끊긴 플레이어 등)
  Team                      winner_team = 3;  // 승리자 색 (무승부인 경우 TEAM_UNSPECIFIED)
  GameEndType               end_type    = 4;  // 게임 종료 유형
  google.protobuf.Timestamp timestamp   = 5;
}

// 채팅 메시지 브로드캐스트
message ChatBroadcast {
  string                    player_id = 1;
  string                    message   = 2; 	
  google.protobuf.Timestamp timestamp = 3;
}

// 오류를 통일해서 보낼 때
message ErrorResponse {
  string game_id   = 1;  // 오류가 연관된 게임이 있으면
  string player_id = 2;  // 오류를 받는 대상 클라이언트
  int32  code      = 3;  // 서버 내부 오류 코드 (예: 1=InvalidMove, 2=NotInGame 등)
  string message   = 4;  // 사람이 읽을 수 있는 오류 설명
}